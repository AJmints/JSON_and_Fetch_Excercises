The fetch Function

To request the weather data, we will use the fetch function. fetch is a global function that requests, or fetches, resources such as data from an API.

Take note of two necessary aspects of the fetch function:
1. The URL of where the data is located. 
a. For this example, it will be "https://handlers.education.launchcode.org/static/weather.json"

2. A response handler function to utilize the data that is being fetched. 
a. For this example, it will be function(response) {...};

Example code: 
fetch("https://handlers.education.launchcode.org/static/weather.json").then(function(response) {
   console.log(response);
} );

In "fetchEx.html" example, let's break down how fetch works:

1. A URL is passed to fetch as a parameter
2. This causes an HTTP GET request to be sent from the browser to the API.
3. The API processes the request and sends back a response which contains data.
4. Once the browser receives the response, the .then() statement executes.
5. The anonymous response handler function called by the .then(function(response) runs, and this function deals with the data sent back from the API.
6. Based on the code in the handler function, the web page gets updated using the DOM methods.

Note: In this section, fetch is used to make GET requests. fetch can also be used to make other types of HTTP requests such as POST and PUT.

27.1.2.2 Response Object

The response to the GET request is contained in a Response object, which is an instance of the Response class. The class contains methods that allow us to access the status of an API request and the data returned in the response.

Example: See responseEx.html

27.1.2.3 Use the DOM and JSON data to update the page

Now that we have JSON weather data, we can add HTML elements to the page to display that data.
Example: See responseEx2.html

Let's take a look at the expected sequence of events:

1. In line 6, the fetch command isends a request to the URL.
2. When the API returns a response, the then method calls the anonymous handler function and passes in the response object (also line 6).
3. On line 7, the handler function tries to retrieve the JSON data from the response object. When this is successful, the anonymous function(json) gets called. 
a. On line 8, the div object is defined and linked to the HTML element with the id weather-conditions.
b. On line 10, the innerHTML property of the div object is set to be the HTML elements in lines 11-16.
c. The HTML in lines 11-16 gets filled in using weather data stored in the json object. 
4. The two anonymous functions end, and the HTML defined in lines 11-16 gets added to the div element on line 26

Note: fetch was chosen as the tool to request data because it's supported in modern browsers by default and is simple to use. When viewing resources other than this book, you will see various other ways to request data in a web page with JavaScript. Other ways include, but are not limited to, jQuery.get, jQuery.ajax, and XMLHttpRequest.

27.2 Asynchronous and Promises

In order to fully explain how the fetch function works, we need to define and talk about the terms asynchronous and synchronous.

Asynchronous: Not simultaneous or concurrent in time. 
Synchronous: Simultaneous or concurrent in time.

When fetching data in JavaScript, the HTTP requests are asynchronous. In brief, that means when and HTTP request is sent, we don't know exactly when a response will be received by the browser. Remember that HTTP requests are sent to an address, then a response is sent. That process takes a variable amount of time depending on network speed, the address location, and response size.

Note: These requests are also called AJAX requests (Asynchronous JavaScript and XML). The XML part of AJAX refers to a data format that was popular before JSON.

27.2.1 Response handlers

Browsers can't stop everything and wait for a response to an HTTP request. Browsers have to render HTML, interact with the user, and run JavaScript. To keep these processes running seamlessly, without any noticeable pauses, the browser relies on events. This is where the .then() and the response handler function come in. The browser provides us with an way to handle the response whenever it is received. 

27.2.2 Promises and the then function

Let's look again at a simple fetch example. Notice on line 1 that then is called on the value returned from fetch.
Example:
fetch("https://handlers.education.launchcode.org/static/weather.json").then( function(response) {
   console.log(response);
} );

To make it clearer, let's capture the value returned by fetch in a variable named fetchPromise.
Example:
const fetchPromise = fetch("https://handlers.education.launchcode.org/static/weather.json");
fetchPromise.then( function(response) {
   console.log(response);
} );

fetch returns an instance of the Promise class. The Promise class represents a promise. a promise is the eventual outcome of an asynchronous event. In the above example, fetchPromise represents the eventual response from the HTTP request to https://handlers.education.launchcode.org/static/weather.json. A promise can e fulfilled or rejected. When a promise is fulfilled, data is passed to the response handler function. The then method of Promise defines what will happen when the promise is fulfilled. When a promise is rejected, the error reason is returned.

The above example can be translated to these steps

1. Make an HTTP request to https://handlers.education.launchcode.org/static/weather.json
2. When the response is received, THEN run the response handler function (passing in response data)
3. In the response handler function, console log the response object

27.2.3 More Promises

Above, we showed a promise representing the outcome of an HTTP request, however, promises can represent the outcome of any asynchronous event. For example, the response object has a json() function that will return the JSON data in the response. The json() function returns a promise that represents the future result of turning the response data into JSON.

The example below shows how promises are used to represent two different types of asynchronous events and the outcomes.
Example:
const fetchPromise = fetch("https://handlers.education.launchcode.org/static/weather.json");
fetchPromise.then( function(response) {
   const jsonPromise = response.json();
   jsonPromise.then( function(json) {
      console.log("temp", json.temp);
   });
} );

This example involves two promises. On line 1, fetchPromise is a promise that represents the fetch request. On line 3, jsonPromise is a promise that represents the response data being turned into JSON. Finally on line 5, the JSON data can be logged.



